# Maintainer: George Rawlinson <grawlinson@archlinux.org>
# Contributor: nyanmisaka <nst799610810@gmail.com>

pkgname=jellyfin-ffmpeg
epoch=1
pkgver=6.0.1p8
pkgrel=1
pkgdesc='Jellyfin fork of ffmpeg'
arch=('loong64' 'x86_64')
url='https://github.com/jellyfin/jellyfin-ffmpeg'
license=('GPL-3.0-only')
depends=(
  'glibc'
  'alsa-lib'
  'bzip2'
  'fontconfig'
  'fribidi'
  'gmp'
  'gnutls'
  'lame'
  'libass.so'
  'libbluray.so'
  'libchromaprint.so'
  'libdav1d.so'
  'libdrm'
  'libfreetype.so'
  'libopenmpt.so'
  'libplacebo.so'
  'libtheora'
  'libva.so'
  'libva-drm.so'
  'libvdpau'
  'libvorbisenc.so'
  'libvorbis.so'
  'libvpx.so'
  'libwebp'
  'libx11'
  'libx264.so'
  'libx265.so'
  'libxext'
  'libxml2'
  'libzimg.so'
  'ocl-icd'
  'onevpl'
  'opus'
  'shaderc'
  'srt'
  'vulkan-icd-loader'
  'xz'
  'zlib'
  'zvbi'
)
makedepends=(
  'git'
  'nasm'
  'clang'
  'ffnvcodec-headers'
  'amf-headers'
  'opencl-headers'
  'vulkan-headers'
)
optdepends=(
  'intel-media-driver: for Intel VAAPI support (Broadwell and newer)'
  'intel-media-sdk: for Intel Quick Sync Video'
  'onevpl-intel-gpu: for Intel Quick Sync Video (Alder Lake and newer)'
  'intel-compute-runtime: for Intel OpenCL runtime based tonemapping'
  'libva-intel-driver: for Intel legacy VAAPI support (Comet Lake and older)'
  'libva-mesa-driver: for AMD VAAPI support'
  'nvidia-utils: for Nvidia NVDEC/NVENC support'
  'opencl-amd: for AMD OpenCL runtime based Tonemapping'
  'vulkan-radeon: for AMD RADV Vulkan support'
  'vulkan-intel: for Intel ANV Vulkan support'
)
options=('!lto')
source=("$pkgname::git+$url#tag=v${pkgver/p/-}"
        "$pkgname-06c2a2c4.patch::https://github.com/FFmpeg/FFmpeg/commit/06c2a2c4.patch"
        "$pkgname-43b417d5.patch::https://github.com/FFmpeg/FFmpeg/commit/43b417d5.patch")
sha512sums=('f72d0899f09bbfe7969b6694debb479313fbd20270dd37486a0e47ef8b56252958dc56635cc55f0e0f3bc52813680b56bcb3bfc32d2bfc670773c9283c6b999e'
            '23d4132f983f92b030a90f80eb8d409f9eae039d6d762b2eaea75d080155cdf919856f4f8d1532fa15f440e1a09ccde6c9824cb4881071e13c16fad3c9f4aa51'
            '748d77b84a6cfd786dbb961fd11e972b987618eaad135959741247a2e0fb8b9569b2b7b0a957d84c472085bbed08b44506da8e93fd412657a6c42ea1315bb899')
b2sums=('eea7f98e291afae1ca9b1ff6e82a2a1ef493a0004c976cc55e708f9bc32952d2e62cb38cdce80ac3c40ac5c9e55b2b04844499dcee664abadfd5a1dc07687c34'
        '044b1c13336a3cec263c17aa6438cd7b8e19ce328e9c8127d3c6d9dcb8dcfacefde713e47b35217c06826f87d00954b5e0a722fb4ab744c625e3d210d418bd77'
        'c8dfbed01442b1173c94ee7f7c7bda59802e86359be7dfcf52e25a05f245deac1ed8f3ca8e43650bef033cbd44c3ac15d32c191d913227da497187fcbbefa954')

prepare() {
  cd "$pkgname"

  # apply jellyfin patches to ffmpeg
  for i in debian/patches/*.patch; do
    patch -p1 -i "$i"
  done

  # Fix build with newest nvidia
  patch -p1 -i "$srcdir/$pkgname-06c2a2c4.patch"
  patch -p1 -i "$srcdir/$pkgname-43b417d5.patch"
}

build() {
  cd "$pkgname"

  ./configure \
    --prefix="/usr/lib/jellyfin-ffmpeg" \
    --target-os=linux \
    --extra-version=Jellyfin \
    --disable-doc \
    --disable-ffplay \
    --disable-ptx-compression \
    --disable-shared \
    --disable-libxcb \
    --disable-sdl2 \
    --disable-xlib \
    --enable-gpl \
    --enable-version3 \
    --enable-static \
    --enable-gmp \
    --enable-gnutls \
    --enable-chromaprint \
    --enable-libfontconfig \
    --enable-libass \
    --enable-libbluray \
    --enable-libdrm \
    --enable-libfreetype \
    --enable-libfribidi \
    --enable-libmp3lame \
    --enable-libopus \
    --enable-libopenmpt \
    --enable-libtheora \
    --enable-libvorbis \
    --enable-libdav1d \
    --enable-libwebp \
    --enable-libvpx \
    --enable-libx264 \
    --enable-libx265 \
    --enable-libzvbi \
    --enable-libzimg \
    --enable-libshaderc \
    --enable-libplacebo \
    --enable-vulkan \
    --enable-opencl \
    --enable-vaapi \
    --enable-amf \
    --enable-libvpl \
    --enable-ffnvcodec \
    --enable-cuda \
    --enable-cuda-llvm \
    --enable-cuvid \
    --enable-nvdec \
    --enable-nvenc

  make
}

package() {
  cd "$pkgname"

  install -vDm755 -t "$pkgdir/usr/lib/$pkgname" ff{mpeg,probe}
}
