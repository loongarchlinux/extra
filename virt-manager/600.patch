From 564b110d66843a36604bacd4107ef773ac0e8933 Mon Sep 17 00:00:00 2001
From: li weigang <weigangli99@gmail.com>
Date: Mon, 30 Oct 2023 14:47:47 +0800
Subject: [PATCH] add loongarch support

---
 virtManager/createvm.py     |  5 ++++-
 virtinst/devices/disk.py    |  2 ++
 virtinst/devices/video.py   |  2 ++
 virtinst/domain/cpu.py      |  5 +++++
 virtinst/domain/os.py       |  3 +++
 virtinst/domcapabilities.py |  6 +++++-
 virtinst/guest.py           | 16 ++++++++++++----
 7 files changed, 33 insertions(+), 6 deletions(-)

diff --git a/virtManager/createvm.py b/virtManager/createvm.py
index 95aff71b2..df6dbb789 100644
--- a/virtManager/createvm.py
+++ b/virtManager/createvm.py
@@ -476,7 +476,8 @@ def _set_caps_state(self):
 
         installable_arch = bool(guest.os.is_x86() or
                 guest.os.is_ppc64() or
-                guest.os.is_s390x())
+                guest.os.is_s390x() or
+                guest.os.is_loongarch())
 
         default_efi = (
             self.config.get_default_firmware_setting() == "uefi" and
@@ -857,6 +858,8 @@ def _populate_machine(self):
         machines.sort()
 
         defmachine = None
+        if self._capsinfo.arch in ["loongarch64"]:
+            defmachine = "loongson7a"
         prios = []
         recommended_machine = virtinst.Guest.get_recommended_machine(
                 self._capsinfo)
diff --git a/virtinst/devices/disk.py b/virtinst/devices/disk.py
index 9609ebacf..1e2c56f8a 100644
--- a/virtinst/devices/disk.py
+++ b/virtinst/devices/disk.py
@@ -982,6 +982,8 @@ def _default_bus(self, guest):
         if self.conn.is_bhyve():
             # IDE bus is not supported by bhyve
             return "sata"
+        if self.is_cdrom() and guest.os.is_loongarch():
+            return "scsi"
         return "ide"
 
     def set_defaults(self, guest):
diff --git a/virtinst/devices/video.py b/virtinst/devices/video.py
index 70067a72c..d10fd7aa4 100644
--- a/virtinst/devices/video.py
+++ b/virtinst/devices/video.py
@@ -27,6 +27,8 @@ class DeviceVideo(Device):
 
     @staticmethod
     def default_model(guest):
+        if guest.os.is_loongarch():
+            return "virtio"
         if not guest.os.is_hvm():
             return None
         if guest.os.is_pseries():
diff --git a/virtinst/domain/cpu.py b/virtinst/domain/cpu.py
index c635932ed..2c66b9dfc 100644
--- a/virtinst/domain/cpu.py
+++ b/virtinst/domain/cpu.py
@@ -462,5 +462,10 @@ def set_defaults(self, guest):
             # -M virt defaults to a 32bit CPU, even if using aarch64
             self.set_model(guest, "cortex-a57")
 
+        elif guest.os.is_loongarch() and guest.type == "kvm":
+            if guest.os.arch != self.conn.caps.host.cpu.arch:
+                return
+            self.set_special_mode(guest, guest.loongarch_cpu_default)
+
         elif guest.os.is_x86() and guest.type == "kvm":
             self._set_cpu_x86_kvm_default(guest)
diff --git a/virtinst/domain/os.py b/virtinst/domain/os.py
index 4310e6238..ae2cd97b1 100644
--- a/virtinst/domain/os.py
+++ b/virtinst/domain/os.py
@@ -78,6 +78,9 @@ def is_riscv(self):
     def is_riscv_virt(self):
         return self.is_riscv() and str(self.machine).startswith("virt")
 
+    def is_loongarch(self):
+        return self.arch == "loongarch64"
+
     ##################
     # XML properties #
     ##################
diff --git a/virtinst/domcapabilities.py b/virtinst/domcapabilities.py
index db08bf65f..8694cbd3a 100644
--- a/virtinst/domcapabilities.py
+++ b/virtinst/domcapabilities.py
@@ -291,6 +291,10 @@ def build_from_guest(guest):
             r".*arm/QEMU_EFI.*",  # fedora, gerd's firmware repo
             r".*edk2-arm-code\.fd"  # upstream qemu
         ],
+        "loongarch64": [
+            ".*loongarch_bios.bin",  # loongarch
+            ".*loongarch_bios.bin",  # gerd's firmware repo
+        ],
     }
 
     def find_uefi_path_for_arch(self):
@@ -446,7 +450,7 @@ def supports_graphics_spice(self):
             # support. Use our pre-existing logic
             if not self.conn.is_qemu() and not self.conn.is_test():
                 return False
-            return self.conn.caps.host.cpu.arch in ["i686", "x86_64"]
+            return self.conn.caps.host.cpu.arch in ["i686", "x86_64", "loongarch64"]
 
         return self.devices.graphics.get_enum("type").has_value("spice")
 
diff --git a/virtinst/guest.py b/virtinst/guest.py
index babe3de66..7bcccd817 100644
--- a/virtinst/guest.py
+++ b/virtinst/guest.py
@@ -213,6 +213,7 @@ def __init__(self, *args, **kwargs):
         self.skip_default_tpm = False
         self.have_default_tpm = False
         self.x86_cpu_default = self.cpu.SPECIAL_MODE_APP_DEFAULT
+        self.loongarch_cpu_default = self.cpu.SPECIAL_MODE_HOST_MODEL_ONLY
 
         # qemu 6.1, fairly new when we added this option, has an unfortunate
         # bug with >= 15 root ports, so we choose 14 instead of our original 16
@@ -353,7 +354,8 @@ def _supports_virtio(self, os_support):
         if (self.os.is_arm_machvirt() or
             self.os.is_riscv_virt() or
             self.os.is_s390x() or
-            self.os.is_pseries()):
+            self.os.is_pseries() or
+            self.os.is_loongarch()):
             return True
 
         if not os_support:
@@ -542,7 +544,7 @@ def prefers_uefi(self):
             # and doesn't break QEMU internal snapshots
             prefer_efi = self.osinfo.requires_firmware_efi(self.os.arch)
         else:
-            prefer_efi = self.os.is_arm_machvirt() or self.conn.is_bhyve()
+            prefer_efi = self.os.is_arm_machvirt() or self.conn.is_bhyve() or self.os.is_loongarch()
 
         log.debug("Prefer EFI => %s", prefer_efi)
         return prefer_efi
@@ -559,6 +561,8 @@ def set_uefi_path(self, path):
         """
         self.os.loader_ro = True
         self.os.loader_type = "pflash"
+        if (self.os.is_loongarch()):
+            self.os.loader_type = "rom"
         self.os.loader = path
 
         # If the firmware name contains "secboot" it is probably build
@@ -908,7 +912,8 @@ def _add_default_input_device(self):
             usb_tablet = True
         if (self.os.is_arm_machvirt() or
             self.os.is_riscv_virt() or
-            self.os.is_pseries()):
+            self.os.is_pseries() or
+            self.os.is_loongarch()):
             usb_tablet = True
             usb_keyboard = True
 
@@ -1022,7 +1027,8 @@ def _add_default_graphics(self):
         if self.os.is_container() and not self.conn.is_vz():
             return
         if (not self.os.is_x86() and
-            not self.os.is_pseries()):
+            not self.os.is_pseries() and
+            not self.os.is_loongarch()):
             return
         self.add_device(DeviceGraphics(self.conn))
 
@@ -1164,6 +1170,8 @@ def _add_spice_sound(self):
         self.add_device(dev)
 
     def _add_spice_usbredir(self):
+        if self.os.is_loongarch():
+            return
         if not self.lookup_domcaps().supports_redirdev_usb():
             return  # pragma: no cover
         if self.skip_default_usbredir:
