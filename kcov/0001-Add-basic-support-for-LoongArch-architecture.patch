From 02bc582371c5ff5f4b4781975c2c12f9744b4162 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Thu, 29 Jun 2023 19:49:29 +0800
Subject: [PATCH] Add basic support for LoongArch architecture

---
 src/engines/ptrace.cc       |  6 ++++++
 src/engines/ptrace_linux.cc | 18 +++++++++++-------
 src/solib-parser/lib.c      |  2 ++
 3 files changed, 19 insertions(+), 7 deletions(-)

diff --git a/src/engines/ptrace.cc b/src/engines/ptrace.cc
index 7676751..18acaa6 100644
--- a/src/engines/ptrace.cc
+++ b/src/engines/ptrace.cc
@@ -52,6 +52,12 @@ static unsigned long arch_setupBreakpoint(unsigned long addr, unsigned long old_
 	val = (old_data & ~(0xffffffffUL << shift)) | (0xd4200000UL << shift);
 #elif defined(__riscv)
 	val = 0x00100073; /* ebreak */ // No width problem, prefer ebreak than c.ebreak for ISA w/o C extension.
+#elif defined(__loongarch__)
+	unsigned long aligned_addr = getAligned(addr);
+	unsigned long offs = addr - aligned_addr;
+	unsigned long shift = 8 * offs;
+
+	val = (old_data & ~(0xffffffffUL << shift)) | (0x002a0004UL << shift); /* break 0x4 */
 #else
 # error Unsupported architecture
 #endif
diff --git a/src/engines/ptrace_linux.cc b/src/engines/ptrace_linux.cc
index 4062a06..a73be00 100644
--- a/src/engines/ptrace_linux.cc
+++ b/src/engines/ptrace_linux.cc
@@ -3,7 +3,7 @@
 #include <sys/ptrace.h>
 #include <sys/wait.h>
 
-#if defined(__aarch64__)
+#if defined(__aarch64__) || defined(__loongarch__)
 #  include <sys/uio.h>
 #  include <elf.h>
 #endif
@@ -20,7 +20,7 @@
 enum
 {
 	i386_EIP = 12, x86_64_RIP = 16, ppc_NIP = 32, arm_PC = 15, aarch64_PC = 32, // See Linux arch/arm64/include/asm/ptrace.h
-	riscv_EPC = 0
+	riscv_EPC = 0, loongarch_ERA = 33
 };
 
 static void arch_adjustPcAfterBreakpoint(unsigned long *regs);
@@ -41,7 +41,7 @@ static void arch_adjustPcAfterBreakpoint(unsigned long *regs)
 	regs[i386_EIP]--;
 #elif defined(__x86_64__)
 	regs[x86_64_RIP]--;
-#elif defined(__powerpc__) || defined(__arm__) || defined(__aarch64__) || defined(__riscv)
+#elif defined(__powerpc__) || defined(__arm__) || defined(__aarch64__) || defined(__riscv) || defined(__loongarch__)
 	// Do nothing
 #else
 # error Unsupported architecture
@@ -64,6 +64,8 @@ static unsigned long arch_getPcFromRegs(unsigned long *regs)
 	out = regs[ppc_NIP];
 #elif defined(__riscv)
 	out = regs[riscv_EPC];
+#elif defined(__loongarch__)
+	out = regs[loongarch_ERA];
 #else
 # error Unsupported architecture
 #endif
@@ -321,7 +323,7 @@ static unsigned long getPcFromRegs(unsigned long *regs)
 
 static long getRegs(pid_t pid, void *addr, void *regs, size_t len)
 {
-#if defined(__aarch64__)
+#if defined(__aarch64__) || defined(__loongarch__)
 	struct iovec iov =
 	{	regs, len};
 	return ptrace(PTRACE_GETREGSET, pid, (void *)NT_PRSTATUS, &iov);
@@ -369,7 +371,7 @@ void ptrace_sys::pokeWord(pid_t pid, unsigned long aligned_addr, unsigned long v
 
 static long setRegs(pid_t pid, void *addr, void *regs, size_t len)
 {
-#if defined(__aarch64__)
+#if defined(__aarch64__) || defined(__loongarch__)
 	struct iovec iov =
 	{	regs, len};
 	return ptrace(PTRACE_SETREGSET, pid, (void *)NT_PRSTATUS, &iov);
@@ -392,7 +394,7 @@ void ptrace_sys::singleStep(pid_t pid)
 void ptrace_sys::skipInstruction(pid_t pid)
 {
 	// Nop on x86, op on PowerPC/ARM
-#if defined(__powerpc__) || defined(__arm__) || defined(__aarch64__)
+#if defined(__powerpc__) || defined(__arm__) || defined(__aarch64__) || defined(__loongarch__)
 	unsigned long regs[1024];
 
 	getRegs(pid, NULL, regs, sizeof regs);
@@ -401,8 +403,10 @@ void ptrace_sys::skipInstruction(pid_t pid)
 	regs[ppc_NIP] += 4;
 # elif defined(__aarch64__)
 	regs[aarch64_PC] += 4;
-# else
+# elif defined(__arm__)
 	regs[arm_PC] += 4;
+# else
+	regs[loongarch_ERA] += 4;
 # endif
 	setRegs(pid, NULL, regs, sizeof regs);
 #endif
diff --git a/src/solib-parser/lib.c b/src/solib-parser/lib.c
index 87a2344..82a7712 100644
--- a/src/solib-parser/lib.c
+++ b/src/solib-parser/lib.c
@@ -97,6 +97,8 @@ static void force_breakpoint(void)
 			".long 0xd4200000\n" /* From https://github.com/scottt/debugbreak */
 #elif defined(__riscv)
 			"ebreak\n"
+#elif defined(__loongarch__)
+			"break 0x4\n"
 #else
 # error Unsupported architecture
 #endif
-- 
2.41.0

