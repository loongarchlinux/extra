From bce73e8d7aeffc7be8090789a0ec841479e9c33e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Sun, 23 Jun 2024 10:41:03 +0200
Subject: [PATCH] color-selection: Fallback to X11

This adds back support for grabbing color natively on X11 when Portal
support is unavailable.

Partially reverts commit f68055ce3f91001503a31753b03836b6cf86b3dd
---
 src/gcolor3-color-selection.c | 234 +++++++++++++++++++++++++++++++++-
 1 file changed, 233 insertions(+), 1 deletion(-)

diff --git a/src/gcolor3-color-selection.c b/src/gcolor3-color-selection.c
index 5df9d54..4e1a252 100644
--- a/src/gcolor3-color-selection.c
+++ b/src/gcolor3-color-selection.c
@@ -37,6 +37,9 @@
 #include <math.h>
 #include <string.h>
 #include <gdk/gdk.h>
+#ifdef GDK_WINDOWING_X11
+#include <gdk/gdkx.h>
+#endif
 #include <gio/gio.h>
 #include <gtk/gtk.h>
 #include <glib/gi18n.h>
@@ -124,7 +127,9 @@ struct _Gcolor3ColorSelectionPrivate
   guint changing          : 1;
   guint default_set       : 1;
   guint default_alpha_set : 1;
+#ifdef GDK_WINDOWING_X11
   guint has_grab          : 1;
+#endif
 
   // FIXME: these can be replaced with a GdkRGBA
   gdouble color[COLORSEL_NUM_CHANNELS];
@@ -153,6 +158,13 @@ struct _Gcolor3ColorSelectionPrivate
   GtkWidget *cur_sample;
   GtkWidget *colorsel;
 
+#ifdef GDK_WINDOWING_X11
+  /* Window for grabbing on */
+  GtkWidget *dropper_grab_widget;
+  GdkDevice *keyboard_device;
+  GdkDevice *pointer_device;
+#endif
+
   GCancellable *cancellable;
 
   /* Connection to settings */
@@ -176,6 +188,11 @@ static void     gcolor3_color_selection_realize     (GtkWidget          *widget)
 static void     gcolor3_color_selection_unrealize   (GtkWidget          *widget);
 static void     gcolor3_color_selection_show_all    (GtkWidget          *widget);
 
+#ifdef GDK_WINDOWING_X11
+static gboolean gcolor3_color_selection_grab_broken (GtkWidget          *widget,
+                                                     GdkEventGrabBroken *event);
+#endif
+
 static void     gcolor3_color_selection_set_palette_color   (Gcolor3ColorSelection *colorsel,
                                                              gint                   index,
                                                              GdkRGBA               *color);
@@ -226,19 +243,69 @@ static void     set_selected_palette                        (Gcolor3ColorSelecti
 static void     set_focus_line_attributes                   (GtkWidget             *drawing_area,
                                                              cairo_t               *cr,
                                                              gint                  *focus_width);
+#ifdef GDK_WINDOWING_X11
 static gboolean mouse_press                                 (GtkWidget             *invisible,
                                                              GdkEventButton        *event,
                                                              gpointer               data);
+#endif
 static void  palette_change_notify_instance                 (GObject    *object,
                                                              GParamSpec *pspec,
                                                              gpointer    data);
 static void update_palette                                  (Gcolor3ColorSelection *colorsel);
+#ifdef GDK_WINDOWING_X11
+static void shutdown_eyedropper                             (GtkWidget *widget);
+#endif
 
 static guint color_selection_signals[LAST_SIGNAL] = { 0 };
 
 static Gcolor3ColorSelectionChangePaletteFunc noscreen_change_palette_hook = default_noscreen_change_palette_func;
 static Gcolor3ColorSelectionChangePaletteWithScreenFunc change_palette_hook = default_change_palette_func;
 
+#ifdef GDK_WINDOWING_X11
+static const guchar dropper_bits[] = {
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\377\377"
+  "\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\0\0\0\377"
+  "\0\0\0\377\0\0\0\377\377\377\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377"
+  "\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377"
+  "\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0"
+  "\0\377\0\0\0\377\0\0\0\377\377\377\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\0\0\0\377\0\0\0\377\0"
+  "\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377"
+  "\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
+  "\0\0\377\377\377\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\0\0\0\377\0\0"
+  "\0\377\0\0\0\377\377\377\377\377\377\377\377\377\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377"
+  "\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\377\377"
+  "\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377"
+  "\0\0\0\377\377\377\377\377\0\0\0\377\377\377\377\377\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377"
+  "\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\0\0\0\0\0\377\377"
+  "\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0"
+  "\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\377\377"
+  "\377\377\377\0\0\0\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377"
+  "\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\377\0\0"
+  "\0\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\0\0\0\0\0\0\0\377\0\0\0"
+  "\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"};
+#endif
+
 G_DEFINE_TYPE_WITH_PRIVATE (Gcolor3ColorSelection, gcolor3_color_selection, GTK_TYPE_BOX)
 
 static void
@@ -257,6 +324,9 @@ gcolor3_color_selection_class_init (Gcolor3ColorSelectionClass *klass)
   widget_class->realize = gcolor3_color_selection_realize;
   widget_class->unrealize = gcolor3_color_selection_unrealize;
   widget_class->show_all = gcolor3_color_selection_show_all;
+#ifdef GDK_WINDOWING_X11
+  widget_class->grab_broken_event = gcolor3_color_selection_grab_broken;
+#endif
 
   g_object_class_install_property (gobject_class,
                                    PROP_HAS_OPACITY_CONTROL,
@@ -598,6 +668,14 @@ gcolor3_color_selection_destroy (GtkWidget *widget)
 
   g_cancellable_cancel (priv->cancellable);
 
+#ifdef GDK_WINDOWING_X11
+  if (priv->dropper_grab_widget)
+    {
+      gtk_widget_destroy (priv->dropper_grab_widget);
+      priv->dropper_grab_widget = NULL;
+    }
+#endif
+
   GTK_WIDGET_CLASS (gcolor3_color_selection_parent_class)->destroy (widget);
 }
 
@@ -639,6 +717,17 @@ gcolor3_color_selection_show_all (GtkWidget *widget)
   gtk_widget_show (widget);
 }
 
+#ifdef GDK_WINDOWING_X11
+static gboolean
+gcolor3_color_selection_grab_broken (GtkWidget                 *widget,
+                                     UNUSED GdkEventGrabBroken *event)
+{
+  shutdown_eyedropper (widget);
+
+  return TRUE;
+}
+#endif
+
 /*
  *
  * The Sample Color
@@ -1560,6 +1649,35 @@ palette_new (Gcolor3ColorSelection *colorsel)
 
 /* The actual Gcolor3ColorSelection widget */
 
+#ifdef GDK_WINDOWING_X11
+static GdkCursor *
+make_picker_cursor (GdkScreen *screen)
+{
+  GdkCursor *cursor;
+
+  cursor = gdk_cursor_new_from_name (gdk_screen_get_display (screen),
+                                     "color-picker");
+
+  if (!cursor)
+    {
+      GdkPixbuf *pixbuf;
+
+      pixbuf = gdk_pixbuf_new_from_data (dropper_bits,
+                                         GDK_COLORSPACE_RGB, TRUE, 8,
+                                         DROPPER_WIDTH, DROPPER_HEIGHT,
+                                         DROPPER_STRIDE,
+                                         NULL, NULL);
+
+      cursor = gdk_cursor_new_from_pixbuf (gdk_screen_get_display (screen),
+                                           pixbuf,
+                                           DROPPER_X_HOT, DROPPER_Y_HOT);
+
+      g_object_unref (pixbuf);
+    }
+
+  return cursor;
+}
+
 static void
 grab_color_at_pointer (GdkScreen *screen,
                        GdkDevice *device,
@@ -1606,6 +1724,27 @@ grab_color_at_pointer (GdkScreen *screen,
   update_color (colorsel);
 }
 
+static void
+shutdown_eyedropper (GtkWidget *widget)
+{
+  Gcolor3ColorSelection *colorsel;
+  Gcolor3ColorSelectionPrivate *priv;
+
+  colorsel = GCOLOR3_COLOR_SELECTION (widget);
+  priv = colorsel->private_data;
+
+  if (priv->has_grab)
+    {
+      gdk_seat_ungrab (gdk_device_get_seat (priv->keyboard_device));
+      gdk_seat_ungrab (gdk_device_get_seat(priv->pointer_device));
+      gtk_device_grab_remove (priv->dropper_grab_widget, priv->pointer_device);
+
+      priv->has_grab = FALSE;
+      priv->keyboard_device = NULL;
+      priv->pointer_device = NULL;
+    }
+}
+
 static void
 mouse_motion (UNUSED GtkWidget      *invisible,
               GdkEventMotion        *event,
@@ -1630,6 +1769,8 @@ mouse_release (GtkWidget      *invisible,
                          gdk_event_get_device ((GdkEvent *) event),
                          event->x_root, event->y_root, data);
 
+  shutdown_eyedropper (GTK_WIDGET (data));
+
   g_signal_handlers_disconnect_by_func (invisible,
                                         mouse_motion,
                                         data);
@@ -1671,6 +1812,8 @@ key_press (GtkWidget   *invisible,
       /* fall through */
 
     case GDK_KEY_Escape:
+      shutdown_eyedropper (data);
+
       g_signal_handlers_disconnect_by_func (invisible,
                                             mouse_press,
                                             data);
@@ -1733,6 +1876,84 @@ mouse_press (GtkWidget      *invisible,
   return FALSE;
 }
 
+static void
+get_screen_color_x11 (Gcolor3ColorSelection *colorsel)
+{
+  Gcolor3ColorSelectionPrivate *priv = colorsel->private_data;
+  GdkScreen *screen = gtk_widget_get_screen (GTK_WIDGET (colorsel));
+  GdkDevice *keyb_device, *pointer_device;
+  GdkSeat *seat;
+  GdkCursor *picker_cursor;
+  GdkGrabStatus grab_status;
+  GdkWindow *window;
+  GtkWidget *grab_widget, *toplevel;
+
+  seat = gdk_display_get_default_seat (gdk_screen_get_display (screen));
+  keyb_device = gdk_seat_get_keyboard(seat);
+  pointer_device = gdk_seat_get_pointer(seat);
+
+  if (priv->dropper_grab_widget == NULL)
+    {
+      grab_widget = gtk_window_new (GTK_WINDOW_POPUP);
+      gtk_window_set_screen (GTK_WINDOW (grab_widget), screen);
+      gtk_window_resize (GTK_WINDOW (grab_widget), 1, 1);
+      gtk_window_move (GTK_WINDOW (grab_widget), -100, -100);
+      gtk_widget_show (grab_widget);
+
+      gtk_widget_add_events (grab_widget,
+                             GDK_BUTTON_RELEASE_MASK | GDK_BUTTON_PRESS_MASK | GDK_POINTER_MOTION_MASK);
+
+      toplevel = gtk_widget_get_toplevel (GTK_WIDGET (colorsel));
+
+      if (GTK_IS_WINDOW (toplevel))
+        {
+          if (gtk_window_has_group (GTK_WINDOW (toplevel)))
+            gtk_window_group_add_window (gtk_window_get_group (GTK_WINDOW (toplevel)),
+                                         GTK_WINDOW (grab_widget));
+        }
+
+      priv->dropper_grab_widget = grab_widget;
+    }
+
+  window = gtk_widget_get_window (priv->dropper_grab_widget);
+
+  if (gdk_seat_grab (seat,
+                     window,
+                     GDK_SEAT_CAPABILITY_ALL, FALSE,
+                     NULL,
+                     NULL, NULL, NULL) != GDK_GRAB_SUCCESS)
+    return;
+
+  picker_cursor = make_picker_cursor (screen);
+  grab_status = gdk_seat_grab (seat,
+                               window,
+                               GDK_SEAT_CAPABILITY_ALL, FALSE,
+                               picker_cursor,
+                               NULL, NULL, NULL);
+
+  g_object_unref (picker_cursor);
+
+  if (grab_status != GDK_GRAB_SUCCESS)
+    {
+      gdk_seat_ungrab (seat);
+      return;
+    }
+
+  gtk_device_grab_add (priv->dropper_grab_widget,
+                       pointer_device,
+                       TRUE);
+
+  priv->has_grab = TRUE;
+  priv->keyboard_device = keyb_device;
+  priv->pointer_device = pointer_device;
+
+  g_signal_connect (priv->dropper_grab_widget, "button-press-event",
+                    G_CALLBACK (mouse_press), colorsel);
+  g_signal_connect (priv->dropper_grab_widget, "key-press-event",
+                    G_CALLBACK (key_press), colorsel);
+}
+#endif
+
 /* when the button is clicked */
 static void
 get_screen_color (GtkWidget *button)
@@ -1762,18 +1983,29 @@ pick_color_cb (GObject      *source_object,
 {
   Gcolor3ColorSelection *colorsel;
   Gcolor3ColorSelectionPrivate *priv;
+  GdkScreen *screen;
   GdkRGBA color;
   GVariant *variant;
   GError *error = NULL;
 
   colorsel = GCOLOR3_COLOR_SELECTION (user_data);
   priv = colorsel->private_data;
+  screen = gtk_widget_get_screen (GTK_WIDGET (colorsel));
 
   variant = xdp_portal_pick_color_finish (XDP_PORTAL (source_object), result, &error);
   if (!variant)
     {
       if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-        g_warning ("Failed to pick color: %s", error->message);
+        {
+          g_warning ("Failed to pick color with XdpPortal: %s", error->message);
+#ifdef GDK_WINDOWING_X11
+          if (GDK_IS_X11_DISPLAY (gdk_screen_get_display (screen)))
+            {
+              g_message ("Fallback to X11");
+              get_screen_color_x11 (colorsel);
+            }
+#endif
+        }
       g_error_free (error);
       return;
     }
-- 
GitLab

