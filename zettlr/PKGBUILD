# Maintainer: Caleb Maclennan <caleb@alerque.com>
# Contributor: BrLi <brli at chakralinux dot org>
# Contributor: loqs <bugs-archlinux@entropy-collector.net>

pkgname=zettlr
_pkgname=${pkgname^}
pkgver=3.2.0
pkgrel=1
pkgdesc='A Markdown Editor for the 21st century'
arch=(loong64 x86_64)
url=https://www.zettlr.com
_url="https://github.com/$_pkgname/$_pkgname"
license=(GPL-3.0-only)
_electron=electron30
depends=(crimson-font
         "$_electron"
         pandoc-cli
         ttf-inconsolata
         ttf-liberation)
makedepends=(gendesk
             git
             nodejs-lts-iron # grep NODE_VERSION: .github/workflows/build.yml
             node-gyp
             yarn
             jq)
optdepends=('texlive-latex: For Latex support')
_archive="$_pkgname-$pkgver"
source=("$_url/archive/v$pkgver/$_archive.tar.gz"
        "$pkgname.sh"
        "$pkgname.xml")
sha256sums=('9f482decf7c88b0903114dcf81b49faa8b576c48c3ed6ca0241da4593ffdefcf'
            'e300f2cac217f98ab5c365dccc7581410bc296f2842d52f7f1520dd6679d20cf'
            'c3ecbb490a1d4fa5bc42f7166cc375e5629a452d25bb1d4facb5541938681292')

prepare() {
	local commit=$(zcat ${source[1]##*/} | git get-tar-commit-id)
	gendesk -q -f -n \
		--pkgname "$pkgname" \
		--pkgdesc "$pkgdesc" \
		--name "$_pkgname" \
		--categories 'Office' \
		--mimetypes 'text/markdown' \
		--custom StartupWMClass="$_pkgname"
	cd "$_archive"
	local _electronVersion="$(cat /usr/lib/$_electron/version)"
	readarray -t _oldElectron <  <(yarn info --cache --json 'electron' | jq -r '.children | .Version,.Cache.Checksum')
	sed -i -e '/get-git-hash/d' -e "/GIT_COMMIT_HASH/s/await getGitHash()/\"$commit\"/" forge.config.js
	sed -i "/${_oldElectron[1]:3}/d" yarn.lock
	sed -i "s/\([\^ :]\)${_oldElectron[0]}/\1$_electronVersion/" package.json yarn.lock
	echo -ne '#!/usr/bin/env bash\n\nexit 0' > scripts/get-pandoc.sh
	sed -e "s/@ELECTRON@/$_electron/" "../${source[1]}" > $pkgname.sh
	yarn install --immutable # postinstall script installs electron-builder deps
	ln -sf /usr/bin/pandoc resources/pandoc-linux-x64
}

build() {
	cd "$_archive"
	local NODE_ENV=''
	yarn package:linux-x64
}

package() {
	install -Dm0644 -t "$pkgdir/usr/share/applications/" "$pkgname.desktop"
	cd "$_archive"
	install -Dm0755 "$pkgname.sh" "$pkgdir/usr/bin/$pkgname"
	local _destdir="usr/lib/$pkgname"
	install -Dm0644 -t "$pkgdir/$_destdir/" \
		"out/$_pkgname-linux-x64/resources/"{app.asar,icon.code.icns}
	cp -a out/$_pkgname-linux-x64/resources/app.asar.unpacked "$pkgdir/$_destdir/"
	for px in 16 24 32 48 64 96 128 256 512 1024; do
		install -Dm0644 "resources/icons/png/${px}x${px}.png" \
			"$pkgdir/usr/share/icons/hicolor/${px}x${px}/apps/$pkgname.png"
	done
	install -Dm0644 -t "$pkgdir/usr/share/mime/packages/" "../${source[2]}"
}
