
# HG changeset patch
# User Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
# Date 1665408155 0
# Node ID d9e0d2d8b3a89bdee2a55a0bdab9adcd108eb253
# Parent  f0bbec2617db346c3032e870fc571970728ae220
Bug 1792981 - [loong64] Enable JIT compiler of loong64 port by default. r=jandem

Fix a build with JIT issue on native loongarch64 machine, and enable JIT by default.

Differential Revision: https://phabricator.services.mozilla.com/D158397

diff --git a/js/moz.configure b/js/moz.configure
--- a/js/moz.configure
+++ b/js/moz.configure
@@ -265,16 +265,18 @@ def jit_codegen(jit_enabled, simulator, 
 
     if simulator:
         return simulator
 
     if target.cpu == "aarch64":
         return namespace(arm64=True)
     elif target.cpu == "x86_64":
         return namespace(x64=True)
+    elif target.cpu == "loongarch64":
+        return namespace(loong64=True)
 
     return namespace(**{str(target.cpu): True})
 
 
 set_config("JS_CODEGEN_NONE", jit_codegen.none)
 set_config("JS_CODEGEN_ARM", jit_codegen.arm)
 set_config("JS_CODEGEN_ARM64", jit_codegen.arm64)
 set_config("JS_CODEGEN_MIPS32", jit_codegen.mips32)
diff --git a/js/src/wasm/WasmSignalHandlers.cpp b/js/src/wasm/WasmSignalHandlers.cpp
--- a/js/src/wasm/WasmSignalHandlers.cpp
+++ b/js/src/wasm/WasmSignalHandlers.cpp
@@ -158,10 +158,10 @@
 #      define R32_sig(p) ((p)->uc_mcontext.gp_regs[32])
 #    endif
 #    if defined(__linux__) && defined(__loongarch__)
-#      define EPC_sig(p) ((p)->uc_mcontext.pc)
-#      define RRA_sig(p) ((p)->uc_mcontext.gregs[1])
-#      define RSP_sig(p) ((p)->uc_mcontext.gregs[3])
-#      define RFP_sig(p) ((p)->uc_mcontext.gregs[22])
+#      define EPC_sig(p) ((p)->uc_mcontext.__pc)
+#      define RRA_sig(p) ((p)->uc_mcontext.__gregs[1])
+#      define R03_sig(p) ((p)->uc_mcontext.__gregs[3])
+#      define RFP_sig(p) ((p)->uc_mcontext.__gregs[22])
 #    endif
 #  elif defined(__NetBSD__)
 #    define EIP_sig(p) ((p)->uc_mcontext.__gregs[_REG_EIP])
@@ -403,17 +403,17 @@ struct macos_aarch64_context {
 #  elif defined(__ppc64__) || defined(__PPC64__) || defined(__ppc64le__) || \
       defined(__PPC64LE__)
 #    define PC_sig(p) R32_sig(p)
 #    define SP_sig(p) R01_sig(p)
 #    define FP_sig(p) R01_sig(p)
 #  elif defined(__loongarch__)
 #    define PC_sig(p) EPC_sig(p)
 #    define FP_sig(p) RFP_sig(p)
-#    define SP_sig(p) RSP_sig(p)
+#    define SP_sig(p) R03_sig(p)
 #    define LR_sig(p) RRA_sig(p)
 #  endif
 
 static void SetContextPC(CONTEXT* context, uint8_t* pc) {
 #  ifdef PC_sig
   *reinterpret_cast<uint8_t**>(&PC_sig(context)) = pc;
 #  else
   MOZ_CRASH();

