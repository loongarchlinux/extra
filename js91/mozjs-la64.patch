diff --git a/build/gyp_base.mozbuild b/build/gyp_base.mozbuild
index 83cd272e10..8dc50190d0 100644
--- a/build/gyp_base.mozbuild
+++ b/build/gyp_base.mozbuild
@@ -33,6 +33,7 @@ arches = {
     'x86': 'ia32',
     'aarch64': 'arm64',
     'ppc64': 'ppc64le' if CONFIG['TARGET_ENDIANNESS'] == 'little' else 'ppc64',
+    'loongarch64': 'loongarch64',
 }
 
 gyp_vars['host_arch'] = arches.get(CONFIG['HOST_CPU_ARCH'], CONFIG['HOST_CPU_ARCH'])
diff --git a/build/moz.configure/init.configure b/build/moz.configure/init.configure
index 3a164c6558..a269e47981 100644
--- a/build/moz.configure/init.configure
+++ b/build/moz.configure/init.configure
@@ -774,6 +774,9 @@ def split_triplet(triplet, allow_msvc=False, allow_wasi=False):
     elif cpu == "wasm32" and allow_wasi:
         canonical_cpu = "wasm32"
         endianness = "little"
+    elif cpu.startswith('loongarch64'):
+        canonical_cpu = 'loongarch64'
+        endianness = 'little'
     else:
         raise ValueError("Unknown CPU type: %s" % cpu)
 
diff --git a/intl/icu/source/i18n/double-conversion-utils.h b/intl/icu/source/i18n/double-conversion-utils.h
index c937463647..56753f84f5 100644
--- a/intl/icu/source/i18n/double-conversion-utils.h
+++ b/intl/icu/source/i18n/double-conversion-utils.h
@@ -123,6 +123,7 @@ int main(int argc, char** argv) {
     defined(_POWER) || defined(_ARCH_PPC) || defined(_ARCH_PPC64) || \
     defined(__sparc__) || defined(__sparc) || defined(__s390__) || \
     defined(__SH4__) || defined(__alpha__) || \
+    defined(__loongarch64) || \
     defined(_MIPS_ARCH_MIPS32R2) || defined(__ARMEB__) ||\
     defined(__AARCH64EL__) || defined(__aarch64__) || defined(__AARCH64EB__) || \
     defined(__riscv) || defined(__e2k__) || \
diff --git a/js/src/jit/AtomicOperations.h b/js/src/jit/AtomicOperations.h
index f4a5727d05..ac124b3169 100644
--- a/js/src/jit/AtomicOperations.h
+++ b/js/src/jit/AtomicOperations.h
@@ -382,7 +382,8 @@ constexpr inline bool AtomicOperations::isLockfreeJS(int32_t size) {
     defined(__ppc64__) || defined(__PPC64__) || defined(__ppc64le__) || \
     defined(__PPC64LE__) || defined(__alpha__) || defined(__hppa__) ||  \
     defined(__sh__) || defined(__s390__) || defined(__s390x__) ||       \
-    defined(__m68k__) || defined(__riscv) || defined(__wasi__)
+    defined(__m68k__) || defined(__riscv) || defined(__wasi__) || \
+    defined(__loongarch64)
 #  include "jit/shared/AtomicOperations-feeling-lucky.h"
 #else
 #  error "No AtomicOperations support provided for this platform"
diff --git a/mfbt/double-conversion/double-conversion/utils.h b/mfbt/double-conversion/double-conversion/utils.h
index 6022132e2b..dd4a392161 100644
--- a/mfbt/double-conversion/double-conversion/utils.h
+++ b/mfbt/double-conversion/double-conversion/utils.h
@@ -107,6 +107,7 @@ int main(int argc, char** argv) {
 #if defined(_M_X64) || defined(__x86_64__) || \
     defined(__ARMEL__) || defined(__avr32__) || defined(_M_ARM) || defined(_M_ARM64) || \
     defined(__hppa__) || defined(__ia64__) || \
+    defined(__loongarch__) || \
     defined(__mips__) || \
     defined(__nios2__) || defined(__ghs) || \
     defined(__powerpc__) || defined(__ppc__) || defined(__ppc64__) || \
diff --git a/mfbt/tests/TestPoisonArea.cpp b/mfbt/tests/TestPoisonArea.cpp
index 96af108037..89a02356ee 100644
--- a/mfbt/tests/TestPoisonArea.cpp
+++ b/mfbt/tests/TestPoisonArea.cpp
@@ -147,6 +147,9 @@
 #elif defined __hppa
 #  define RETURN_INSTR 0xe840c002 /* bv,n r0(rp) */
 
+#elif defined __loongarch64
+#  define RETURN_INSTR 0x4c000020 /* jirl */
+
 #elif defined __mips
 #  define RETURN_INSTR 0x03e00008 /* jr ra */
 
diff --git a/python/mozbuild/mozbuild/configure/constants.py b/python/mozbuild/mozbuild/configure/constants.py
index 9f7a977f61..189953c1ec 100644
--- a/python/mozbuild/mozbuild/configure/constants.py
+++ b/python/mozbuild/mozbuild/configure/constants.py
@@ -47,6 +47,7 @@ CPU_bitness = {
     "arm": 32,
     "hppa": 32,
     "ia64": 64,
+    "loongarch64": 64,
     "m68k": 32,
     "mips32": 32,
     "mips64": 64,
@@ -91,6 +92,7 @@ CPU_preprocessor_checks = OrderedDict(
         ("hppa", "__hppa__"),
         ("sparc64", "__sparc__ && __arch64__"),
         ("sparc", "__sparc__"),
+        ('loongarch64', '__loongarch64'),
         ("m68k", "__m68k__"),
         ("mips64", "__mips64"),
         ("mips32", "__mips__"),
