diff --git a/src/backend/datasources/filters/DBCParser.cpp b/src/backend/datasources/filters/DBCParser.cpp
index 33d05c257..bfc6648ee 100644
--- a/src/backend/datasources/filters/DBCParser.cpp
+++ b/src/backend/datasources/filters/DBCParser.cpp
@@ -14,7 +14,7 @@ bool DbcParser::parseFile(const QString& filename) {
 	try {
 		m_parser.parse_file(filename.toStdString());
 		m_valid = true;
-	} catch (libdbc::validity_error e) {
+	} catch (Libdbc::ValidityError e) {
 		// e.what(); // TODO: turn on
 	}
 #else
@@ -23,20 +23,20 @@ bool DbcParser::parseFile(const QString& filename) {
 	return m_valid;
 }
 
-DbcParser::ParseStatus DbcParser::parseMessage(const uint32_t id, const std::vector<uint8_t>& data, std::vector<double>& out) {
+DbcParser::ParseStatus DbcParser::parse_message(const uint32_t id, const std::vector<uint8_t>& data, std::vector<double>& out) {
 	if (!m_valid)
 		return ParseStatus::ErrorInvalidFile;
 #ifdef HAVE_DBC_PARSER
-	switch (m_parser.parseMessage(id, data, out)) {
-	case libdbc::Message::ParseSignalsStatus::Success:
+	switch (m_parser.parse_message(id, data, out)) {
+	case Libdbc::Message::ParseSignalsStatus::Success:
 		return ParseStatus::Success;
-	case libdbc::Message::ParseSignalsStatus::ErrorMessageToLong:
+	case Libdbc::Message::ParseSignalsStatus::ErrorMessageToLong:
 		return ParseStatus::ErrorMessageToLong;
-	case libdbc::Message::ParseSignalsStatus::ErrorBigEndian:
+	case Libdbc::Message::ParseSignalsStatus::ErrorBigEndian:
 		return ParseStatus::ErrorBigEndian;
-	case libdbc::Message::ParseSignalsStatus::ErrorUnknownID:
+	case Libdbc::Message::ParseSignalsStatus::ErrorUnknownID:
 		return ParseStatus::ErrorUnknownID;
-	case libdbc::Message::ParseSignalsStatus::ErrorInvalidConversion:
+	case Libdbc::Message::ParseSignalsStatus::ErrorInvalidConversion:
 		return ParseStatus::ErrorInvalidConversion;
 	}
 #else
@@ -62,7 +62,7 @@ QStringList DbcParser::signals(const QVector<uint32_t> ids, QHash<uint32_t, int>
 			if (message.id() == id) {
 				idIndex.insert(id, s.length());
 				// const auto message = m_messages.value(id);
-				for (const auto& signal_ : message.getSignals())
+				for (const auto& signal_ : message.get_signals())
 					s.append(QString::fromStdString(signal_.name + "_" + signal_.unit));
 				break;
 			}
diff --git a/src/backend/datasources/filters/DBCParser.h b/src/backend/datasources/filters/DBCParser.h
index 1579ca6b1..4aa4a6bd7 100644
--- a/src/backend/datasources/filters/DBCParser.h
+++ b/src/backend/datasources/filters/DBCParser.h
@@ -4,6 +4,7 @@
 #include <QVector>
 #ifdef HAVE_DBC_PARSER
 #include <libdbc/dbc.hpp>
+#include <libdbc/exceptions/error.hpp>
 #endif
 
 class QString;
@@ -23,7 +24,7 @@ public:
 	bool isValid();
 	bool parseFile(const QString& filename);
 
-	ParseStatus parseMessage(const uint32_t id, const std::vector<uint8_t>& data, std::vector<double>& out);
+	ParseStatus parse_message(const uint32_t id, const std::vector<uint8_t>& data, std::vector<double>& out);
 
 	/*!
 	 * \brief numberSignals
@@ -37,7 +38,7 @@ private:
 	bool m_valid{false};
 	// QMap<uint32_t, libdbc::Message> m_messages;
 #ifdef HAVE_DBC_PARSER
-	libdbc::DbcParser m_parser;
+	Libdbc::DbcParser m_parser;
 #endif
 };
 
diff --git a/src/backend/datasources/filters/VectorBLFFilter.cpp b/src/backend/datasources/filters/VectorBLFFilter.cpp
index cdc6ea930..f44a7775b 100644
--- a/src/backend/datasources/filters/VectorBLFFilter.cpp
+++ b/src/backend/datasources/filters/VectorBLFFilter.cpp
@@ -251,7 +251,7 @@ int VectorBLFFilterPrivate::readDataFromFileCommonTime(const QString& fileName,
 			if (ohb->objectType == Vector::BLF::ObjectType::CAN_MESSAGE2) {
 				const auto message = reinterpret_cast<const Vector::BLF::CanMessage2*>(ohb);
 				id = message->id;
-				status = m_dbcParser.parseMessage(message->id, message->data, values);
+				status = m_dbcParser.parse_message(message->id, message->data, values);
 			} else
 				return 0;
 
@@ -296,7 +296,7 @@ int VectorBLFFilterPrivate::readDataFromFileCommonTime(const QString& fileName,
 			if (ohb->objectType == Vector::BLF::ObjectType::CAN_MESSAGE2) {
 				const auto message = reinterpret_cast<const Vector::BLF::CanMessage2*>(ohb);
 				id = message->id;
-				status = m_dbcParser.parseMessage(message->id, message->data, values);
+				status = m_dbcParser.parse_message(message->id, message->data, values);
 			} else
 				return 0;
 
