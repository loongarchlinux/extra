From 2e8c11b36537b1319af1c8095909b8882d203a0a Mon Sep 17 00:00:00 2001
From: Xiaotian Wu <wuxiaotian@loongson.cn>
Date: Mon, 9 May 2022 18:08:30 +0800
Subject: [PATCH] add support for loongarch64

---
 src/libsmbios_c/cmos/cmos_linux.c |   6 +
 src/libsmbios_c/cmos/io.h         | 625 ++++++++++++++++++++++++++++++
 2 files changed, 631 insertions(+)
 create mode 100644 src/libsmbios_c/cmos/io.h

diff --git a/src/libsmbios_c/cmos/cmos_linux.c b/src/libsmbios_c/cmos/cmos_linux.c
index 11c0871..ffae53c 100644
--- a/src/libsmbios_c/cmos/cmos_linux.c
+++ b/src/libsmbios_c/cmos/cmos_linux.c
@@ -22,7 +22,11 @@
 #include "smbios_c/compat.h"
 
 // system
+#if defined(__i386__) || defined(__x86_64__)
 #include <sys/io.h>
+#else
+#include "io.h"
+#endif
 #include <stdlib.h>
 #include <errno.h>
 
@@ -57,8 +61,10 @@ int __hidden init_cmos_struct(struct cmos_access_obj *m)
     int retval = 0;
 
     fnprintf("\n");
+#if defined(__i386__) || defined(__x86_64__)
     if(iopl(3) < 0)
         goto out_noprivs;
+#endif
 
     m->read_fn = linux_read_fn;
     m->write_fn = linux_write_fn;
diff --git a/src/libsmbios_c/cmos/io.h b/src/libsmbios_c/cmos/io.h
new file mode 100644
index 0000000..fb0a726
--- /dev/null
+++ b/src/libsmbios_c/cmos/io.h
@@ -0,0 +1,625 @@
+/* vi: set sw=4 ts=4 sts=4 expandtab wrap ai: */
+/* Generic I/O port emulation, based on MN10300 code
+ *
+ * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.
+ * Copyright (C) 2021 Xiaotian Wu <wuxiaotian@loongson.cn>
+ * Written by David Howells (dhowells@redhat.com)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public Licence
+ * as published by the Free Software Foundation; either version
+ * 2 of the Licence, or (at your option) any later version.
+ */
+
+#ifndef __IO_H__
+#define __IO_H__  1
+
+#include <linux/types.h>
+#include <asm/byteorder.h>
+
+/*
+ * __raw_{read,write}{b,w,l,q}() access memory in native endianness.
+ *
+ * On some architectures memory mapped IO needs to be accessed differently.
+ * On the simple architectures, we just read/write the memory location
+ * directly.
+ */
+#ifndef __raw_readb
+#define __raw_readb __raw_readb
+static inline __u8 __raw_readb(const volatile void *addr)
+{
+	return *(const volatile __u8 *)addr;
+}
+#endif
+#ifndef __raw_readw
+#define __raw_readw __raw_readw
+static inline __u16 __raw_readw(const volatile void *addr)
+{
+	return *(const volatile __u16 *)addr;
+}
+#endif
+#ifndef __raw_readl
+#define __raw_readl __raw_readl
+static inline __u32 __raw_readl(const volatile void  *addr)
+{
+	return *(const volatile __u32  *)addr;
+}
+#endif
+
+#ifdef __LP64__
+#ifndef __raw_readq
+#define __raw_readq __raw_readq
+static inline __u64 __raw_readq(const volatile void  *addr)
+{
+	return *(const volatile __u64  *)addr;
+}
+#endif
+#endif /* __LP64__ */
+
+#ifndef __raw_writeb
+#define __raw_writeb __raw_writeb
+static inline void __raw_writeb(__u8 value, volatile void  *addr)
+{
+	*(volatile __u8  *)addr = value;
+}
+#endif
+#ifndef __raw_writew
+#define __raw_writew __raw_writew
+static inline void __raw_writew(__u16 value, volatile void  *addr)
+{
+	*(volatile __u16  *)addr = value;
+}
+#endif
+#ifndef __raw_writel
+#define __raw_writel __raw_writel
+static inline void __raw_writel(__u32 value, volatile void  *addr)
+{
+	*(volatile __u32  *)addr = value;
+}
+#endif
+
+#ifdef __LP64__
+#ifndef __raw_writeq
+#define __raw_writeq __raw_writeq
+static inline void __raw_writeq(__u64 value, volatile void  *addr)
+{
+	*(volatile __u64  *)addr = value;
+}
+#endif
+#endif /* __LP64__ */
+/*
+ * {read,write}{b,w,l,q}() access little endian memory and return result in
+ * native endianness.
+ */
+#ifndef readb
+#define readb readb
+static inline __u8 readb(const volatile void  *addr)
+{
+	return __raw_readb(addr);
+}
+#endif
+#ifndef readw
+#define readw readw
+static inline __u16 readw(const volatile void  *addr)
+{
+	return __le16_to_cpu(__raw_readw(addr));
+}
+#endif
+#ifndef readl
+#define readl readl
+static inline __u32 readl(const volatile void  *addr)
+{
+	return __le32_to_cpu(__raw_readl(addr));
+}
+#endif
+#ifdef __LP64__
+#ifndef readq
+#define readq readq
+static inline __u64 readq(const volatile void  *addr)
+{
+	return __le64_to_cpu(__raw_readq(addr));
+}
+#endif
+#endif /* __LP64__ */
+#ifndef writeb
+#define writeb writeb
+static inline void writeb(__u8 value, volatile void  *addr)
+{
+	__raw_writeb(value, addr);
+}
+#endif
+#ifndef writew
+#define writew writew
+static inline void writew(__u16 value, volatile void  *addr)
+{
+	__raw_writew(__cpu_to_le16(value), addr);
+}
+#endif
+#ifndef writel
+#define writel writel
+static inline void writel(__u32 value, volatile void  *addr)
+{
+	__raw_writel(__cpu_to_le32(value), addr);
+}
+#endif
+#ifdef __LP64__
+#ifndef writeq
+#define writeq writeq
+static inline void writeq(__u64 value, volatile void  *addr)
+{
+	__raw_writeq(__cpu_to_le64(value), addr);
+}
+#endif
+#endif /* __LP64__ */
+/*
+ * {read,write}{b,w,l,q}_relaxed() are like the regular version, but
+ * are not guaranteed to provide ordering against spinlocks or memory
+ * accesses.
+ */
+#ifndef readb_relaxed
+#define readb_relaxed readb
+#endif
+#ifndef readw_relaxed
+#define readw_relaxed readw
+#endif
+#ifndef readl_relaxed
+#define readl_relaxed readl
+#endif
+#if defined(readq) && !defined(readq_relaxed)
+#define readq_relaxed readq
+#endif
+#ifndef writeb_relaxed
+#define writeb_relaxed writeb
+#endif
+#ifndef writew_relaxed
+#define writew_relaxed writew
+#endif
+#ifndef writel_relaxed
+#define writel_relaxed writel
+#endif
+#if defined(writeq) && !defined(writeq_relaxed)
+#define writeq_relaxed writeq
+#endif
+/*
+ * {read,write}s{b,w,l,q}() repeatedly access the same memory address in
+ * native endianness in 8-, 16-, 32- or 64-bit chunks (@count times).
+ */
+#ifndef readsb
+#define readsb readsb
+static inline void readsb(const volatile void  *addr, void *buffer,
+			  unsigned int count)
+{
+	if (count) {
+		__u8 *buf = buffer;
+		do {
+			__u8 x = __raw_readb(addr);
+			*buf++ = x;
+		} while (--count);
+	}
+}
+#endif
+#ifndef readsw
+#define readsw readsw
+static inline void readsw(const volatile void  *addr, void *buffer,
+			  unsigned int count)
+{
+	if (count) {
+		__u16 *buf = buffer;
+		do {
+			__u16 x = __raw_readw(addr);
+			*buf++ = x;
+		} while (--count);
+	}
+}
+#endif
+#ifndef readsl
+#define readsl readsl
+static inline void readsl(const volatile void  *addr, void *buffer,
+			  unsigned int count)
+{
+	if (count) {
+		__u32 *buf = buffer;
+		do {
+			__u32 x = __raw_readl(addr);
+			*buf++ = x;
+		} while (--count);
+	}
+}
+#endif
+#ifdef __LP64__
+#ifndef readsq
+#define readsq readsq
+static inline void readsq(const volatile void  *addr, void *buffer,
+			  unsigned int count)
+{
+	if (count) {
+		__u64 *buf = buffer;
+		do {
+			__u64 x = __raw_readq(addr);
+			*buf++ = x;
+		} while (--count);
+	}
+}
+#endif
+#endif /* __LP64__ */
+#ifndef writesb
+#define writesb writesb
+static inline void writesb(volatile void  *addr, const void *buffer,
+			   unsigned int count)
+{
+	if (count) {
+		const __u8 *buf = buffer;
+		do {
+			__raw_writeb(*buf++, addr);
+		} while (--count);
+	}
+}
+#endif
+#ifndef writesw
+#define writesw writesw
+static inline void writesw(volatile void  *addr, const void *buffer,
+			   unsigned int count)
+{
+	if (count) {
+		const __u16 *buf = buffer;
+		do {
+			__raw_writew(*buf++, addr);
+		} while (--count);
+	}
+}
+#endif
+#ifndef writesl
+#define writesl writesl
+static inline void writesl(volatile void  *addr, const void *buffer,
+			   unsigned int count)
+{
+	if (count) {
+		const __u32 *buf = buffer;
+		do {
+			__raw_writel(*buf++, addr);
+		} while (--count);
+	}
+}
+#endif
+#ifdef __LP64__
+#ifndef writesq
+#define writesq writesq
+static inline void writesq(volatile void  *addr, const void *buffer,
+			   unsigned int count)
+{
+	if (count) {
+		const __u64 *buf = buffer;
+		do {
+			__raw_writeq(*buf++, addr);
+		} while (--count);
+	}
+}
+#endif
+#endif /* __LP64__ */
+
+#ifndef PCI_IOBASE
+#define PCI_IOBASE ((void  *)0)
+#endif
+
+#ifndef IO_SPACE_LIMIT
+#define IO_SPACE_LIMIT 0xffff
+#endif
+/*
+ * {in,out}{b,w,l}() access little endian I/O. {in,out}{b,w,l}_p() can be
+ * implemented on hardware that needs an additional delay for I/O accesses to
+ * take effect.
+ */
+#ifndef inb
+#define inb inb
+static inline __u8 inb(unsigned long addr)
+{
+	return readb(PCI_IOBASE + addr);
+}
+#endif
+#ifndef inw
+#define inw inw
+static inline __u16 inw(unsigned long addr)
+{
+	return readw(PCI_IOBASE + addr);
+}
+#endif
+#ifndef inl
+#define inl inl
+static inline __u32 inl(unsigned long addr)
+{
+	return readl(PCI_IOBASE + addr);
+}
+#endif
+#ifndef outb
+#define outb outb
+static inline void outb(__u8 value, unsigned long addr)
+{
+	writeb(value, PCI_IOBASE + addr);
+}
+#endif
+#ifndef outw
+#define outw outw
+static inline void outw(__u16 value, unsigned long addr)
+{
+	writew(value, PCI_IOBASE + addr);
+}
+#endif
+#ifndef outl
+#define outl outl
+static inline void outl(__u32 value, unsigned long addr)
+{
+	writel(value, PCI_IOBASE + addr);
+}
+#endif
+#ifndef inb_p
+#define inb_p inb_p
+static inline __u8 inb_p(unsigned long addr)
+{
+	return inb(addr);
+}
+#endif
+#ifndef inw_p
+#define inw_p inw_p
+static inline __u16 inw_p(unsigned long addr)
+{
+	return inw(addr);
+}
+#endif
+#ifndef inl_p
+#define inl_p inl_p
+static inline __u32 inl_p(unsigned long addr)
+{
+	return inl(addr);
+}
+#endif
+#ifndef outb_p
+#define outb_p outb_p
+static inline void outb_p(__u8 value, unsigned long addr)
+{
+	outb(value, addr);
+}
+#endif
+#ifndef outw_p
+#define outw_p outw_p
+static inline void outw_p(__u16 value, unsigned long addr)
+{
+	outw(value, addr);
+}
+#endif
+#ifndef outl_p
+#define outl_p outl_p
+static inline void outl_p(__u32 value, unsigned long addr)
+{
+	outl(value, addr);
+}
+#endif
+/*
+ * {in,out}s{b,w,l}{,_p}() are variants of the above that repeatedly access a
+ * single I/O port multiple times.
+ */
+#ifndef insb
+#define insb insb
+static inline void insb(unsigned long addr, void *buffer, unsigned int count)
+{
+	readsb(PCI_IOBASE + addr, buffer, count);
+}
+#endif
+#ifndef insw
+#define insw insw
+static inline void insw(unsigned long addr, void *buffer, unsigned int count)
+{
+	readsw(PCI_IOBASE + addr, buffer, count);
+}
+#endif
+#ifndef insl
+#define insl insl
+static inline void insl(unsigned long addr, void *buffer, unsigned int count)
+{
+	readsl(PCI_IOBASE + addr, buffer, count);
+}
+#endif
+#ifndef outsb
+#define outsb outsb
+static inline void outsb(unsigned long addr, const void *buffer,
+			 unsigned int count)
+{
+	writesb(PCI_IOBASE + addr, buffer, count);
+}
+#endif
+#ifndef outsw
+#define outsw outsw
+static inline void outsw(unsigned long addr, const void *buffer,
+			 unsigned int count)
+{
+	writesw(PCI_IOBASE + addr, buffer, count);
+}
+#endif
+#ifndef outsl
+#define outsl outsl
+static inline void outsl(unsigned long addr, const void *buffer,
+			 unsigned int count)
+{
+	writesl(PCI_IOBASE + addr, buffer, count);
+}
+#endif
+#ifndef insb_p
+#define insb_p insb_p
+static inline void insb_p(unsigned long addr, void *buffer, unsigned int count)
+{
+	insb(addr, buffer, count);
+}
+#endif
+#ifndef insw_p
+#define insw_p insw_p
+static inline void insw_p(unsigned long addr, void *buffer, unsigned int count)
+{
+	insw(addr, buffer, count);
+}
+#endif
+#ifndef insl_p
+#define insl_p insl_p
+static inline void insl_p(unsigned long addr, void *buffer, unsigned int count)
+{
+	insl(addr, buffer, count);
+}
+#endif
+#ifndef outsb_p
+#define outsb_p outsb_p
+static inline void outsb_p(unsigned long addr, const void *buffer,
+			   unsigned int count)
+{
+	outsb(addr, buffer, count);
+}
+#endif
+#ifndef outsw_p
+#define outsw_p outsw_p
+static inline void outsw_p(unsigned long addr, const void *buffer,
+			   unsigned int count)
+{
+	outsw(addr, buffer, count);
+}
+#endif
+#ifndef outsl_p
+#define outsl_p outsl_p
+static inline void outsl_p(unsigned long addr, const void *buffer,
+			   unsigned int count)
+{
+	outsl(addr, buffer, count);
+}
+#endif
+
+#ifndef ioread8
+#define ioread8 ioread8
+static inline __u8 ioread8(const volatile void  *addr)
+{
+	return readb(addr);
+}
+#endif
+#ifndef ioread16
+#define ioread16 ioread16
+static inline __u16 ioread16(const volatile void  *addr)
+{
+	return readw(addr);
+}
+#endif
+#ifndef ioread32
+#define ioread32 ioread32
+static inline __u32 ioread32(const volatile void  *addr)
+{
+	return readl(addr);
+}
+#endif
+#ifdef __LP64__
+#ifndef ioread64
+#define ioread64 ioread64
+static inline __u64 ioread64(const volatile void  *addr)
+{
+	return readq(addr);
+}
+#endif
+#endif /* __LP64__ */
+#ifndef iowrite8
+#define iowrite8 iowrite8
+static inline void iowrite8(__u8 value, volatile void  *addr)
+{
+	writeb(value, addr);
+}
+#endif
+#ifndef iowrite16
+#define iowrite16 iowrite16
+static inline void iowrite16(__u16 value, volatile void  *addr)
+{
+	writew(value, addr);
+}
+#endif
+#ifndef iowrite32
+#define iowrite32 iowrite32
+static inline void iowrite32(__u32 value, volatile void  *addr)
+{
+	writel(value, addr);
+}
+#endif
+#ifdef __LP64__
+#ifndef iowrite64
+#define iowrite64 iowrite64
+static inline void iowrite64(__u64 value, volatile void  *addr)
+{
+	writeq(value, addr);
+}
+#endif
+#endif /* __LP64__ */
+
+#ifndef ioread8_rep
+#define ioread8_rep ioread8_rep
+static inline void ioread8_rep(const volatile void  *addr, void *buffer,
+			       unsigned int count)
+{
+	readsb(addr, buffer, count);
+}
+#endif
+#ifndef ioread16_rep
+#define ioread16_rep ioread16_rep
+static inline void ioread16_rep(const volatile void  *addr,
+				void *buffer, unsigned int count)
+{
+	readsw(addr, buffer, count);
+}
+#endif
+#ifndef ioread32_rep
+#define ioread32_rep ioread32_rep
+static inline void ioread32_rep(const volatile void  *addr,
+				void *buffer, unsigned int count)
+{
+	readsl(addr, buffer, count);
+}
+#endif
+#ifdef __LP64__
+#ifndef ioread64_rep
+#define ioread64_rep ioread64_rep
+static inline void ioread64_rep(const volatile void  *addr,
+				void *buffer, unsigned int count)
+{
+	readsq(addr, buffer, count);
+}
+#endif
+#endif /* __LP64__ */
+#ifndef iowrite8_rep
+#define iowrite8_rep iowrite8_rep
+static inline void iowrite8_rep(volatile void  *addr,
+				const void *buffer,
+				unsigned int count)
+{
+	writesb(addr, buffer, count);
+}
+#endif
+#ifndef iowrite16_rep
+#define iowrite16_rep iowrite16_rep
+static inline void iowrite16_rep(volatile void  *addr,
+				 const void *buffer,
+				 unsigned int count)
+{
+	writesw(addr, buffer, count);
+}
+#endif
+#ifndef iowrite32_rep
+#define iowrite32_rep iowrite32_rep
+static inline void iowrite32_rep(volatile void  *addr,
+				 const void *buffer,
+				 unsigned int count)
+{
+	writesl(addr, buffer, count);
+}
+#endif
+#ifdef __LP64__
+#ifndef iowrite64_rep
+#define iowrite64_rep iowrite64_rep
+static inline void iowrite64_rep(volatile void  *addr,
+				 const void *buffer,
+				 unsigned int count)
+{
+	writesq(addr, buffer, count);
+}
+#endif
+#endif /* __LP64__ */
+
+#endif /* __IO_H__ */
-- 
2.35.1

